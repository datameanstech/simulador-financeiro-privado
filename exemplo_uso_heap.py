#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
EXEMPLO DE USO - AN√ÅLISE DE HEAP TIMELINE
Simulador Financeiro

Este script demonstra como usar os analisadores de heap
para otimizar performance do seu simulador.
"""

import os
import time
from datetime import datetime

def demonstrar_uso():
    print("üîç AN√ÅLISE DE HEAP TIMELINE - GUIA DE USO")
    print("=" * 60)
    
    print("\nüìã PASSO A PASSO PARA AN√ÅLISE:")
    print("-" * 40)
    
    passos = [
        {
            "num": 1,
            "titulo": "Coletar HEAPTIMELINE no Chrome DevTools",
            "descricao": [
                "‚Ä¢ Abra Chrome DevTools (F12)",
                "‚Ä¢ V√° para aba 'Memory'",
                "‚Ä¢ Selecione 'Allocation instrumentation on timeline'",
                "‚Ä¢ Clique 'Start' e use sua aplica√ß√£o",
                "‚Ä¢ Clique 'Stop' e salve como .heaptimeline"
            ]
        },
        {
            "num": 2,
            "titulo": "Executar an√°lise do arquivo",
            "descricao": [
                "python analisador_heap.py meu_arquivo.heaptimeline",
                "# ou sem gr√°ficos:",
                "python analisador_heap.py --sem-graficos meu_arquivo.heaptimeline"
            ]
        },
        {
            "num": 3,
            "titulo": "Monitoramento em tempo real",
            "descricao": [
                "# Monitor autom√°tico (encontra processo Flask)",
                "python monitor_memoria_tempo_real.py",
                "",
                "# Monitor espec√≠fico por PID",
                "python monitor_memoria_tempo_real.py --pid 1234",
                "",
                "# Com teste de stress",
                "python monitor_memoria_tempo_real.py --teste-stress"
            ]
        }
    ]
    
    for passo in passos:
        print(f"\n{passo['num']}. {passo['titulo']}")
        print("   " + "-" * len(passo['titulo']))
        for desc in passo['descricao']:
            print(f"   {desc}")
    
    print("\nüìä EXEMPLO DE SA√çDA ESPERADA:")
    print("-" * 30)
    
    exemplo_saida = """
üìä Heap M√°ximo:      2,347.5 MB
üìä Heap M√≠nimo:        156.2 MB  
üìä Heap M√©dio:         834.3 MB
üìä Crescimento:      +1,891.3 MB
üìä Crescimento %:       +89.2%
üìä Picos de Mem√≥ria:        12 eventos

üö® VAZAMENTO DE MEM√ìRIA DETECTADO: Crescimento de 89.2%

üéØ RECOMENDA√á√ïES PRIORIT√ÅRIAS:
 1. üöÄ Use Polars .lazy() para queries nos 14.7M registros
 2. üöÄ Implemente cache Redis para filtros CNAE (1,311 √∫nicos)
 3. üîß OTIMIZA√á√ÉO POLARS: Use .lazy() e .streaming() para datasets grandes
 4. üîß FLASK: Desabilite debug mode em produ√ß√£o (debug=False)
"""
    
    print(exemplo_saida)
    
    print("\nüîß OTIMIZA√á√ïES ESPEC√çFICAS IDENTIFICADAS:")
    print("-" * 45)
    
    otimizacoes = {
        "Polars": [
            "df.lazy().filter(...).collect() em vez de df.filter(...)",
            "df.lazy().group_by(...).agg(...).collect() para agrega√ß√µes",
            "Use .streaming() para datasets > 1GB"
        ],
        "Flask": [
            "app.config['DEBUG'] = False em produ√ß√£o",
            "Use gunicorn: gunicorn -w 4 -b 0.0.0.0:5000 app:app",
            "Implemente cache com @lru_cache ou Redis"
        ],
        "Mem√≥ria": [
            "del vari√°veis_grandes ap√≥s uso",
            "Use generators em vez de listas grandes",
            "Processe dados em chunks de 10k-50k registros"
        ]
    }
    
    for categoria, dicas in otimizacoes.items():
        print(f"\nüìã {categoria}:")
        for dica in dicas:
            print(f"   ‚Ä¢ {dica}")
    
    print("\nüí° EXEMPLO DE C√ìDIGO OTIMIZADO:")
    print("-" * 35)
    
    codigo_exemplo = '''
# ‚ùå ANTES (problem√°tico para 14.7M registros)
df_filtrado = df.filter(pl.col("tribunal").is_in(tribunais_selecionados))
result = df_filtrado.group_by("cnae").agg([
    pl.count().alias("quantidade"),
    pl.sum("valor").alias("total")
]).collect()

# ‚úÖ DEPOIS (otimizado)
result = (
    df.lazy()
    .filter(pl.col("tribunal").is_in(tribunais_selecionados))
    .group_by("cnae")
    .agg([
        pl.count().alias("quantidade"), 
        pl.sum("valor").alias("total")
    ])
    .collect(streaming=True)  # Processa em chunks
)
'''
    
    print(codigo_exemplo)
    
    print("\nüìà M√âTRICAS DE SUCESSO:")
    print("-" * 25)
    
    metricas = [
        "Redu√ß√£o de 50%+ no uso de mem√≥ria",
        "Tempo de resposta < 2s para queries complexas",
        "Zero vazamentos de mem√≥ria detectados",
        "CPU usage < 70% durante picos de uso"
    ]
    
    for metrica in metricas:
        print(f"   ‚úÖ {metrica}")
    
    print(f"\nüïí √öltima atualiza√ß√£o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

def criar_scripts_exemplo():
    """Cria scripts de exemplo para testes"""
    
    # Script para gerar carga de trabalho
    script_carga = '''#!/usr/bin/env python3
import requests
import time
import random

def gerar_carga_trabalho():
    """Gera carga de trabalho para testar o simulador"""
    
    base_url = "http://127.0.0.1:5000"
    
    endpoints = [
        "/api/filtros",
        "/api/cnaes/todos", 
        "/api/ranking"
    ]
    
    print("üîÑ Gerando carga de trabalho...")
    
    for i in range(50):  # 50 requisi√ß√µes
        endpoint = random.choice(endpoints)
        
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=10)
            print(f"Request {i+1}: {endpoint} -> {response.status_code}")
            
        except Exception as e:
            print(f"Erro request {i+1}: {e}")
        
        time.sleep(random.uniform(0.5, 2.0))  # Pausa aleat√≥ria

if __name__ == "__main__":
    gerar_carga_trabalho()
'''
    
    with open("gerar_carga_trabalho.py", "w", encoding="utf-8") as f:
        f.write(script_carga)
    
    # Script para an√°lise automatizada
    script_auto = '''#!/usr/bin/env python3
import subprocess
import sys
import time
from pathlib import Path

def analise_automatizada():
    """Executa an√°lise automatizada completa"""
    
    print("üöÄ AN√ÅLISE AUTOMATIZADA - SIMULADOR FINANCEIRO")
    print("=" * 50)
    
    # 1. Iniciar monitoramento
    print("1. Iniciando monitoramento em background...")
    monitor_proc = subprocess.Popen([
        sys.executable, "monitor_memoria_tempo_real.py",
        "--duracao", "120",  # 2 minutos
        "--sem-graficos"
    ])
    
    # 2. Aguardar in√≠cio do monitor
    time.sleep(5)
    
    # 3. Gerar carga de trabalho
    print("2. Gerando carga de trabalho...")
    subprocess.run([sys.executable, "gerar_carga_trabalho.py"])
    
    # 4. Aguardar conclus√£o do monitor
    print("3. Aguardando conclus√£o do monitoramento...")
    monitor_proc.wait()
    
    # 5. Analisar logs gerados
    print("4. Analisando logs...")
    today = time.strftime("%Y%m%d")
    log_file = f"monitor_memoria_{today}.jsonl"
    
    if Path(log_file).exists():
        print(f"‚úÖ Log gerado: {log_file}")
        # Aqui voc√™ pode adicionar an√°lise do log
    
    print("üéâ An√°lise automatizada conclu√≠da!")

if __name__ == "__main__":
    analise_automatizada()
'''
    
    with open("analise_automatizada.py", "w", encoding="utf-8") as f:
        f.write(script_auto)
    
    print("üìÅ Scripts de exemplo criados:")
    print("   ‚Ä¢ gerar_carga_trabalho.py")
    print("   ‚Ä¢ analise_automatizada.py")

def main():
    demonstrar_uso()
    
    print("\n‚ùì QUER CRIAR SCRIPTS DE EXEMPLO? (s/n): ", end="")
    resposta = input().lower()
    
    if resposta in ['s', 'sim', 'y', 'yes']:
        criar_scripts_exemplo()
    
    print("\nüìö PR√ìXIMOS PASSOS:")
    print("1. Colete um HEAPTIMELINE do seu site")
    print("2. Execute: python analisador_heap.py seu_arquivo.heaptimeline")
    print("3. Execute: python monitor_memoria_tempo_real.py")
    print("4. Implemente as otimiza√ß√µes sugeridas")
    print("5. Repita o processo para validar melhorias")

if __name__ == "__main__":
    main() 