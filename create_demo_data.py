#!/usr/bin/env python3
"""
Criar dados de demonstra√ß√£o menores para deploy
"""
import polars as pl
import numpy as np
import random

def create_demo_data():
    """Cria dados de demonstra√ß√£o com ~1000 empresas"""
    # Usar seed fixa para consist√™ncia
    np.random.seed(42)
    random.seed(42)
    
    # Empresas brasileiras conhecidas (repetir para ter volume)
    empresas_base = [
        'BANCO DO BRASIL S.A.', 'ITA√ö UNIBANCO S.A.', 'BRADESCO S.A.', 'SANTANDER BRASIL S.A.',
        'TELEF√îNICA BRASIL S.A.', 'TIM S.A.', 'CLARO S.A.', 'OI S.A.',
        'PETROBRAS S.A.', 'VALE S.A.', 'AMBEV S.A.', 'JBS S.A.',
        'MAGAZINE LUIZA S.A.', 'VIA VAREJO S.A.', 'LOJAS AMERICANAS S.A.', 'B2W DIGITAL S.A.',
        'CARREFOUR BRASIL S.A.', 'WALMART BRASIL S.A.', 'ATACAD√ÉO S.A.', 'GRUPO P√ÉO DE A√á√öCAR S.A.',
        'EMBRAER S.A.', 'GERDAU S.A.', 'USIMINAS S.A.', 'CSN S.A.',
        'NATURA S.A.', 'O BOTIC√ÅRIO S.A.', 'LOCALIZA S.A.', 'MOVIDA S.A.'
    ]
    
    # Expandir lista para 1000 registros √∫nicos
    empresas = []
    for i in range(1000):
        base = empresas_base[i % len(empresas_base)]
        if i >= len(empresas_base):
            # Adicionar varia√ß√£o para unicidade
            variacao = f" FILIAL {i//len(empresas_base)}"
            empresas.append(base.replace(' S.A.', variacao + ' S.A.'))
        else:
            empresas.append(base)
    
    # Dados simulados realistas
    tribunais = ['TJSP', 'TJRJ', 'TJMG', 'TJRS', 'TJPR', 'TJSC', 'TJBA', 'TJDF', 'TJGO', 'TJPE']
    graus = ['1¬∫ GRAU', '2¬∫ GRAU', 'INST√ÇNCIA √öNICA']
    ramos = [
        'BANCOS E SERVI√áOS FINANCEIROS', 'TELECOMUNICA√á√ïES', 'ENERGIA E PETR√ìLEO', 
        'VAREJO E COM√âRCIO', 'SIDERURGIA E MINERA√á√ÉO', 'ALIMENTA√á√ÉO E BEBIDAS',
        'TECNOLOGIA', 'CONSTRU√á√ÉO CIVIL', 'SA√öDE', 'EDUCA√á√ÉO'
    ]
    segmentos = [
        'ADMINISTRA√á√ÉO P√öBLICA', 'TELECOMUNICA√á√ïES', 'BANC√ÅRIO', 'VAREJO', 
        'ENERGIA', 'MINERA√á√ÉO', 'ALIMENT√çCIO', 'SA√öDE', 'EDUCACIONAL'
    ]
    
    # Gerar CNAEs realistas
    cnaes_bancarios = [64191, 64192, 64194, 64631, 64632, 64633, 64634, 64635]
    cnaes_varejo = [47111, 47112, 47113, 47211, 47212, 47311, 47312, 47321]
    cnaes_telecom = [61101, 61102, 61201, 61202, 61301, 61302, 61401, 61402]
    cnaes_energia = [35111, 35112, 35113, 35121, 35122, 35131, 35132, 35140]
    
    todos_cnaes = cnaes_bancarios + cnaes_varejo + cnaes_telecom + cnaes_energia
    
    # Criar dataset
    dados = []
    for i, empresa in enumerate(empresas):
        # Determinar ramo baseado no nome da empresa
        if 'BANCO' in empresa or 'ITA√ö' in empresa or 'BRADESCO' in empresa:
            ramo = 'BANCOS E SERVI√áOS FINANCEIROS'
            segmento = 'BANC√ÅRIO'
            cnae = random.choice(cnaes_bancarios)
            novos_range = (200, 1500)  # Bancos t√™m mais processos
        elif 'TELEF√îNICA' in empresa or 'TIM' in empresa or 'CLARO' in empresa:
            ramo = 'TELECOMUNICA√á√ïES'
            segmento = 'TELECOMUNICA√á√ïES'
            cnae = random.choice(cnaes_telecom)
            novos_range = (150, 800)
        elif 'PETROBRAS' in empresa or 'VALE' in empresa:
            ramo = 'ENERGIA E PETR√ìLEO'
            segmento = 'ENERGIA'
            cnae = random.choice(cnaes_energia)
            novos_range = (100, 600)
        else:
            ramo = random.choice(ramos)
            segmento = random.choice(segmentos)
            cnae = random.choice(todos_cnaes)
            novos_range = (50, 400)
        
        novos = random.randint(*novos_range)
        pendentes = novos * random.randint(8, 15)  # Pendentes = 8-15x novos
        
        registro = {
            'NOME': empresa,
            'TRIBUNAL': random.choice(tribunais),
            'GRAU': random.choice(graus),
            'RAMO': ramo,
            'SEGMENTO': segmento,
            'CNAE': cnae,
            'NOVOS': novos,
            'PENDENTES BRUTO': pendentes,
            'PENDENTES L√çQUIDO': int(pendentes * 0.8),  # 80% dos brutos
            'ANO': 2025,
            'MES': random.randint(1, 12)
        }
        dados.append(registro)
    
    # Criar DataFrame Polars
    df = pl.DataFrame(dados)
    
    # Salvar
    df.write_parquet('dados_grandes_litigantes_demo.parquet')
    print(f"‚úÖ Dados de demo criados: {len(df):,} registros")
    print(f"üìÅ Arquivo: dados_grandes_litigantes_demo.parquet")
    
    # Estat√≠sticas
    print(f"\nüìä Estat√≠sticas:")
    print(f"   - Empresas √∫nicas: {df['NOME'].n_unique():,}")
    print(f"   - Tribunais: {df['TRIBUNAL'].n_unique()}")
    print(f"   - Total processos novos: {df['NOVOS'].sum():,}")
    print(f"   - Tamanho arquivo: {df.estimated_size('mb'):.1f} MB")

if __name__ == "__main__":
    create_demo_data() 